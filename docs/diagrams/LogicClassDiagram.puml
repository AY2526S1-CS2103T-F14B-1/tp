@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic as LogicPackage {

package "Parser Classes" as ParserClasses{
    Class "<<interface>>\nParser" as Parser
    Class AddressBookParser
    Class XYZCommandParser
    Class ArgumentMultimap
    Class ArgumentTokenizer
    Class CliSyntax
    Class ParserUtil
    Class Prefix
}

package "Command Classes" as CommandClasses{
    Class "{abstract}\nCommand" as Command
    Class CommandResult
    Class XYZCommand
}

package "Exception Classes" as ExceptionClasses{
    Class CommandException
    Class ParseException
}

Class "<<interface>>\nLogic" as Logic
Class LogicManager
Class Messages
}

package Model {
Class HiddenModel #FFFFFF
}

package Storage {
Class HiddenStorage #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .right.|> Logic
LogicManager -right->"1" AddressBookParser
LogicManager --> Model
LogicManager --> Storage

AddressBookParser --> ParserClasses : <<uses>>
ParserClasses ..> CommandClasses : <<create>>

XYZCommand -up-|> Command

XYZCommandParser ..|> Parser

LogicManager .left.> Command : <<executes>>
Command .right.> Model : <<accesses>>
Command .up.> CommandResult : <<creates>>
Command .down.> CommandException : <<throws>>
ParserClasses .down.> ParseException : <<throws>>

Logic ..> CommandResult
LogicManager .down.> CommandResult
Storage --[hidden] Model
Command .[hidden]up.> Storage

note right of CommandClasses: Concrete command implementations\nhandle specific user actions
note left of ParserClasses: Parser classes convert user input\ninto executable commands
@enduml
